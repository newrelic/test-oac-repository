name: Fork PR Handler

on:
  pull_request_target:
    types: [opened, synchronize, closed]  # Added 'closed' to detect when PRs are merged or closed
  
# Add explicit permissions
permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  handle-fork-pr:
    runs-on: ubuntu-latest
    # Only run this workflow for PRs from forks
    if: github.event.pull_request.head.repo.fork == true
    
    steps:
      - name: Log PR event details
        run: |
          echo "::group::PR Event Details"
          echo "Processing PR #${{ github.event.pull_request.number }} from ${{ github.event.pull_request.head.repo.full_name }}"
          echo "PR Title: ${{ github.event.pull_request.title }}"
          echo "PR Branch: ${{ github.event.pull_request.head.ref }}"
          echo "PR Author: ${{ github.event.pull_request.user.login }}"
          echo "Event Type: ${{ github.event_name }}"
          echo "Action: ${{ github.event.action }}"
          echo "Merged: ${{ github.event.pull_request.merged }}"
          echo "::endgroup::"
      
      # If the PR was merged or closed, handle closing the mirror PR
      - name: Close mirror PR when fork PR is closed
        if: github.event.action == 'closed'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            console.log("Fork PR was closed or merged, looking for corresponding mirror PR to close...");
            try {
              const prBranch = '${{ github.event.pull_request.head.ref }}';
              const wasMerged = '${{ github.event.pull_request.merged }}' === 'true';
              
              // Find the upstream PR that uses this branch
              console.log(`Searching for PRs with head: ${context.repo.owner}:${prBranch}`);
              const { data: pullRequests } = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                head: `${context.repo.owner}:${prBranch}`,
                state: 'open'
              });
              
              console.log(`Found ${pullRequests.length} matching PRs`);
              
              if (pullRequests.length > 0) {
                const mirrorPr = pullRequests[0];
                console.log(`Found mirror PR #${mirrorPr.number}`);
                
                if (wasMerged) {
                  // If original PR was merged, close the mirror PR with a comment
                  console.log("Original PR was merged, adding comment and closing mirror PR");
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: mirrorPr.number,
                    body: `üîÑ The original PR #${{ github.event.pull_request.number }} from @${{ github.event.pull_request.user.login }} has been merged. Closing this mirror PR.`
                  });
                  
                  await github.rest.pulls.update({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    pull_number: mirrorPr.number,
                    state: 'closed'
                  });
                  console.log(`Closed mirror PR #${mirrorPr.number}`);
                } else {
                  // If original PR was closed without merging
                  console.log("Original PR was closed without merging, adding comment and closing mirror PR");
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: mirrorPr.number,
                    body: `‚ùå The original PR #${{ github.event.pull_request.number }} from @${{ github.event.pull_request.user.login }} was closed without merging. Closing this mirror PR.`
                  });
                  
                  await github.rest.pulls.update({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    pull_number: mirrorPr.number,
                    state: 'closed'
                  });
                  console.log(`Closed mirror PR #${mirrorPr.number}`);
                }
              } else {
                console.log("No matching mirror PR found to close");
              }
            } catch (error) {
              console.error("Error handling PR closure:", error);
              core.setFailed("Failed to handle PR closure: " + error.message);
            }
        
      # Continue with normal workflow for open/sync events  
      - name: Initial PR Comment
        if: github.event.action != 'closed'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            console.log("Creating initial comment on PR #" + context.issue.number);
            try {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: 'üëã Thanks for your contribution! We are performing a scan of your PR...'
              });
              console.log("Initial comment created successfully");
            } catch (error) {
              console.error("Error creating initial comment:", error);
              core.setFailed("Failed to create initial comment: " + error.message);
            }
      
      - name: Checkout repo
        if: github.event.action != 'closed'
        id: checkout
        uses: actions/checkout@v3
        with:
          # Important: When using pull_request_target, we need to explicitly checkout the PR head
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
      
      - name: Verify checkout
        if: github.event.action != 'closed'
        run: |
          echo "::group::Repository Status"
          if [ -d .git ]; then
            echo "Repository checkout successful"
            git status
            git log -n 1 --oneline
          else
            echo "::error::Repository checkout failed"
            exit 1
          fi
          echo "::endgroup::"
      
      - name: Setup Git Identity
        if: github.event.action != 'closed'
        run: |
          echo "::group::Git Configuration"
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          echo "Git identity configured:"
          git config --get user.name
          git config --get user.email
          echo "::endgroup::"
      
      - name: Check if branch is synced with main
        if: github.event.action != 'closed'
        id: check-sync
        run: |
          echo "::group::Checking branch sync status"
          # Fetch the main branch from the upstream repo
          echo "Fetching main branch..."
          git fetch origin main:main
          if [ $? -ne 0 ]; then
            echo "::error::Failed to fetch main branch"
            exit 1
          fi
          
          # Fetch the PR branch
          PR_BRANCH="${{ github.event.pull_request.head.ref }}"
          PR_REPO="${{ github.event.pull_request.head.repo.clone_url }}"
          echo "Fetching PR branch $PR_BRANCH from $PR_REPO..."
          git fetch "$PR_REPO" "$PR_BRANCH"
          if [ $? -ne 0 ]; then
            echo "::error::Failed to fetch PR branch"
            exit 1
          fi
          
          # Find the common ancestor commit between the PR branch and main
          echo "Finding common ancestor between main and PR branch..."
          COMMON_ANCESTOR=$(git merge-base main FETCH_HEAD)
          MAIN_HEAD=$(git rev-parse main)
          
          echo "Common ancestor: $COMMON_ANCESTOR"
          echo "Main HEAD: $MAIN_HEAD"
          
          if [ "$COMMON_ANCESTOR" = "$MAIN_HEAD" ]; then
            echo "Branch is synced with main or ahead of it"
            echo "is_synced=true" >> $GITHUB_OUTPUT
          else
            echo "Branch is not synced with main"
            echo "is_synced=false" >> $GITHUB_OUTPUT
            # Make workflow fail when branch is not synced
            exit 1
          fi
          echo "::endgroup::"
      
      - name: Comment if not synced
        if: failure() && github.event.action != 'closed'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            console.log("Branch is not synced, adding comment to PR #" + context.issue.number);
            try {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: '‚ö†Ô∏è Your branch is not synced with the latest changes from our main branch. Please update your fork with the latest changes before we can run our workflows.'
              });
              console.log("Not synced comment added successfully");
            } catch (error) {
              console.error("Error creating not-synced comment:", error);
              core.setFailed("Failed to create not-synced comment: " + error.message);
            }
      
      - name: Process synced PR
        if: github.event.action != 'closed'
        id: process-pr
        run: |
          echo "::group::Processing synced PR"
          PR_BRANCH="${{ github.event.pull_request.head.ref }}"
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_BODY="${{ github.event.pull_request.body }}"
          PR_USER="${{ github.event.pull_request.user.login }}"
          FORK_PR_NUMBER="${{ github.event.pull_request.number }}"
          
          echo "PR branch: $PR_BRANCH"
          echo "PR title: $PR_TITLE"
          echo "PR author: $PR_USER"
          echo "PR number: $FORK_PR_NUMBER"
          
          # Get the latest commit ID from the PR branch
          LATEST_COMMIT=$(git rev-parse HEAD)
          echo "Latest commit ID: $LATEST_COMMIT"
          echo "commit_id=$LATEST_COMMIT" >> $GITHUB_OUTPUT
          
          # Check if branch already exists in upstream repo
          echo "Checking if branch already exists in upstream repo..."
          if git ls-remote --heads origin "refs/heads/$PR_BRANCH" | grep -q "refs/heads/$PR_BRANCH"; then
            echo "Branch already exists in upstream repo"
            echo "is_first_commit=false" >> $GITHUB_OUTPUT
            
            # Fetch the fork PR branch
            echo "Fetching the fork PR branch to temp branch..."
            git fetch "${{ github.event.pull_request.head.repo.clone_url }}" "$PR_BRANCH:temp-$PR_BRANCH"
            if [ $? -ne 0 ]; then
              echo "::error::Failed to fetch fork PR branch to temp branch"
              exit 1
            fi
            
            # Update our copy of the branch
            echo "Updating our copy of the branch..."
            git checkout -B "$PR_BRANCH" "temp-$PR_BRANCH"
            if [ $? -ne 0 ]; then
              echo "::error::Failed to checkout branch"
              exit 1
            fi
            
            echo "Pushing updated branch to origin..."
            git push origin "$PR_BRANCH"
            if [ $? -ne 0 ]; then
              echo "::error::Failed to push updated branch"
              exit 1
            fi
            
            echo "Updated existing branch: $PR_BRANCH"
          else
            echo "Branch does not exist yet in upstream repo"
            echo "is_first_commit=true" >> $GITHUB_OUTPUT
            
            # Create the branch in our repo
            echo "Creating new branch in upstream repo..."
            git fetch "${{ github.event.pull_request.head.repo.clone_url }}" "$PR_BRANCH:$PR_BRANCH"
            if [ $? -ne 0 ]; then
              echo "::error::Failed to fetch and create branch"
              exit 1
            fi
            
            echo "Pushing new branch to origin..."
            git push origin "$PR_BRANCH"
            if [ $? -ne 0 ]; then
              echo "::error::Failed to push new branch"
              exit 1
            fi
            
            echo "Created new branch: $PR_BRANCH"
          fi
          echo "::endgroup::"
      
      - name: Get Current Time in IST
        if: github.event.action != 'closed' && steps.process-pr.outputs.is_first_commit == 'true'
        id: time
        run: |
          echo "ist_time=$(TZ='Asia/Kolkata' date '+%Y-%m-%d %H:%M:%S %Z')" >> $GITHUB_OUTPUT
      
      - name: Create PR in upstream for first commit
        if: github.event.action != 'closed' && steps.process-pr.outputs.is_first_commit == 'true'
        id: create-upstream-pr
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            console.log("Creating new PR in upstream repository...");
            try {
              const prBranch = '${{ github.event.pull_request.head.ref }}';
              const prTitle = '[PREVIEW COPY] ${{ github.event.pull_request.title }}';
              const prBody = '${{ github.event.pull_request.body }}' || '';
              const forkOwner = '${{ github.event.pull_request.head.repo.owner.login }}';
              const forkPrNumber = '${{ github.event.pull_request.number }}';
              const commitId = '${{ steps.process-pr.outputs.commit_id }}';
              const istTime = '${{ steps.time.outputs.ist_time }}';
              
              console.log(`PR branch: ${prBranch}`);
              console.log(`PR title: ${prTitle}`);
              console.log(`Fork owner: ${forkOwner}`);
              console.log(`Fork PR number: ${forkPrNumber}`);
              console.log(`Commit ID: ${commitId}`);
              
              const newPrBody = `## üîÑ Mirrored PR Details

**Original Author:** @${forkOwner}
**Original PR Title:** ${{ github.event.pull_request.title }}
**Created At:** ${istTime}
**Commit ID:** \`${commitId}\`

**Original PR:** #${forkPrNumber} (${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/pull/${forkPrNumber})

---

### Original PR Description:

${prBody}

---

> This is an automatically generated mirror of a fork PR. Changes here will not be reflected back to the original PR.`;
              
              console.log("Creating new PR with GitHub API...");
              const { data: newPr } = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: prTitle,
                body: newPrBody,
                head: prBranch,
                base: 'main'
              });
              
              console.log(`Created new PR: ${newPr.number} - ${newPr.html_url}`);
              return { prNumber: newPr.number, prUrl: newPr.html_url };
            } catch (error) {
              console.error("Error creating upstream PR:", error);
              
              // Fallback: If PR creation fails, just report the branch info
              console.log("Falling back to providing branch information only...");
              const prBranch = '${{ github.event.pull_request.head.ref }}';
              const commitId = '${{ steps.process-pr.outputs.commit_id }}';
              
              // We'll return branch info instead so the next step can use it
              return { 
                error: error.message,
                branchCreated: true,
                branchName: prBranch,
                commitId: commitId
              };
            }
      
      - name: Comment on fork PR about new upstream PR
        if: github.event.action != 'closed' && steps.process-pr.outputs.is_first_commit == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            console.log("Adding comment to fork PR about the new upstream PR...");
            try {
              const result = ${{ steps.create-upstream-pr.outputs.result }};
              const commitId = '${{ steps.process-pr.outputs.commit_id }}';
              
              if (result.error) {
                console.error("Cannot comment about upstream PR due to previous error:", result.error);
                if (result.branchCreated) {
                  // PR creation failed, but branch was created successfully
                  const branchName = result.branchName;
                  console.log(`Branch created successfully: ${branchName}, but PR creation failed`);
                  
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: context.issue.number,
                    body: `‚úÖ Your changes have been mirrored to our repository in branch \`${branchName}\` with commit \`${commitId}\`.
                    
A PR was not automatically created due to permission limitations. A repository maintainer will need to manually create a PR from this branch.

You can check the branch here: ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/tree/${branchName}`
                  });
                } else {
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: context.issue.number,
                    body: `‚ö†Ô∏è We encountered an error while trying to create a mirror PR: ${result.error}`
                  });
                }
                return;
              }
              
              // PR was created successfully
              const upstreamPrNumber = result.prNumber;
              console.log(`Referencing upstream PR #${upstreamPrNumber} in comment`);
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `‚úÖ Your PR has been mirrored to our repository as PR #${upstreamPrNumber} (${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/pull/${upstreamPrNumber}).

**Commit:** \`${commitId}\`

Our workflows will run in the mirrored PR. Any updates you make to this PR will be automatically reflected in the mirror.`
              });
              console.log("Comment added successfully to fork PR");
            } catch (error) {
              console.error("Error commenting on fork PR:", error);
              core.setFailed("Failed to comment on fork PR: " + error.message);
            }
      
      - name: Comment on fork PR about updates
        if: github.event.action != 'closed' && steps.process-pr.outputs.is_first_commit == 'false'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            console.log("Adding comment about updates to existing PR...");
            try {
              const prBranch = '${{ github.event.pull_request.head.ref }}';
              const commitId = '${{ steps.process-pr.outputs.commit_id }}';
              console.log(`Looking for upstream PR with branch: ${prBranch}`);
              
              // Find the upstream PR that uses this branch
              console.log(`Searching for PRs with head: ${context.repo.owner}:${prBranch}`);
              const { data: pullRequests } = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                head: `${context.repo.owner}:${prBranch}`,
                state: 'open'
              });
              
              console.log(`Found ${pullRequests.length} matching PRs`);
              
              if (pullRequests.length > 0) {
                const upstreamPrNumber = pullRequests[0].number;
                console.log(`Found upstream PR #${upstreamPrNumber}`);
                
                console.log("Adding comment to fork PR");
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: `‚úÖ Your updates have been mirrored to our repository in PR #${upstreamPrNumber} (${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/pull/${upstreamPrNumber}).
                  
**Commit:** \`${commitId}\``
                });
                
                // Also comment on the upstream PR
                console.log(`Adding comment to upstream PR #${upstreamPrNumber}`);
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: upstreamPrNumber,
                  body: `‚ôªÔ∏è This PR has been updated with the latest changes from the fork PR #${{ github.event.pull_request.number }}.
                  
**New Commit:** \`${commitId}\``
                });
              } else {
                console.log("No matching upstream PR found");
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: `‚ö†Ô∏è Your branch has been updated in our repository with commit \`${commitId}\`, but we couldn't find an open PR for it. This might happen if the PR was closed or merged.`
                });
              }
              console.log("All comments added successfully");
            } catch (error) {
              console.error("Error handling PR updates:", error);
              core.setFailed("Failed to handle PR updates: " + error.message);
            }
      
      - name: Workflow Summary
        if: always()
        run: |
          echo "::group::Workflow Summary"
          echo "PR #${{ github.event.pull_request.number }} processing completed"
          echo "PR Author: ${{ github.event.pull_request.user.login }}"
          echo "PR Branch: ${{ github.event.pull_request.head.ref }}"
          
          if [ "${{ github.event.action }}" = "closed" ]; then
            echo "Action: PR was closed"
            if [ "${{ github.event.pull_request.merged }}" = "true" ]; then
              echo "PR was merged"
            else
              echo "PR was closed without merging"
            fi
          else
            echo "Sync Status: ${{ steps.check-sync.outputs.is_synced || 'not synced' }}"
            if [ "${{ steps.check-sync.outputs.is_synced }}" = "true" ]; then
              echo "First Commit: ${{ steps.process-pr.outputs.is_first_commit || 'unknown' }}"
              echo "Commit ID: ${{ steps.process-pr.outputs.commit_id || 'unknown' }}"
            fi
          fi
          echo "::endgroup::"
